// Generated by CoffeeScript 1.7.1
(function() {
  var BoolFilter, DateTimeFilter, EnumFilter, M2MFilter, QueryFilter, StringFilter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  QueryFilter = (function() {
    function QueryFilter(selectedId, filterDef) {
      this.debugHandler = null;
      this.idName = selectedId;
      this.idNumber = null;
      this.filterDef = filterDef;
    }

    QueryFilter.prototype.setTitle = function(uiTitle) {
      return this.uiTitle = uiTitle;
    };

    QueryFilter.prototype.setDebug = function(debugHandler) {
      this.debugHandler = debugHandler;
    };

    QueryFilter.prototype.setId = function(idNumber) {
      this.idNumber = idNumber;
    };

    QueryFilter.prototype.createUi = function() {
      throw "Not implemented.";
    };

    QueryFilter.prototype.createFilter = function() {
      throw "Not implemented.";
    };

    QueryFilter.prototype.createDebugAttr = function(attr) {
      if (attr == null) {
        attr = "onchange";
      }
      if (this.debugHandler === null) {
        return "";
      }
      return "" + attr + "=\"" + this.debugHandler + "\"";
    };

    QueryFilter.prototype.setDebugAttr = function(target, attr) {
      if (attr == null) {
        attr = "onchange";
      }
      if (this.debugHandler != null) {
        return target.attr(attr, this.debugHandler);
      }
    };

    QueryFilter.prototype.labelFor = function(id, title) {
      if (title == null) {
        title = this.uiTitle;
      }
      return Widget.label(id).text(title);
    };

    QueryFilter.prototype.id = function(suff) {
      if (suff == null) {
        suff = null;
      }
      if (suff === null) {
        return this.idName + "_" + this.idNumber;
      }
      return this.idName + "_" + suff + "_" + this.idNumber;
    };

    QueryFilter.prototype.title = function() {
      return $("<span class=\"title\">").text(this.uiTitle);
    };

    QueryFilter.prototype.applyNOT = function(isNot, query) {
      if (!isNot) {
        return query;
      }
      return ["not", query];
    };

    return QueryFilter;

  })();

  BoolFilter = (function(_super) {
    __extends(BoolFilter, _super);

    function BoolFilter() {
      return BoolFilter.__super__.constructor.apply(this, arguments);
    }

    BoolFilter.prototype.createRadio = function(id, name, value) {
      return this.setDebugAttr(Widget.radio(id).attr("name", name).val(value));
    };

    BoolFilter.prototype.createUi = function() {
      var id_false, id_true, name, output;
      name = this.id();
      id_true = this.id("true");
      id_false = this.id("false");
      output = $("<span id=\"" + name + "\">");
      output.append(this.labelFor(id_true, "Kyllä"), this.createRadio(id_true, name, "true").attr("checked", "checked"));
      output.append(this.labelFor(id_false, "Ei"), this.createRadio(id_false, name, "false"));
      return output;
    };

    BoolFilter.prototype.createFilter = function() {
      var name, selected;
      name = this.id();
      selected = $("#" + name).find("input:checked").attr("value");
      if (selected !== "true" && selected !== "false") {
        throw "Selected value was not any valid boolean value.";
      }
      selected = "true" === selected;
      return ["eq", this.idName, selected];
    };

    return BoolFilter;

  })(QueryFilter);

  QFilterManager.registerFilter("bool", BoolFilter);

  StringFilter = (function(_super) {
    __extends(StringFilter, _super);

    function StringFilter() {
      return StringFilter.__super__.constructor.apply(this, arguments);
    }

    StringFilter.prototype.createMode = function(id) {
      return "<select id=\"" + id + "\" " + (this.createDebugAttr()) + ">\n  <option value=\"contains\" selected=\"selected\">Sisältää</option>\n  <option value=\"!contains\">Ei sisällä</option>\n  <option value=\"startswith\">Alkaa</option>\n  <option value=\"endswith\">Päättyy</option>\n  <option value=\"exact\">On</option>\n  <option value=\"!exact\">Ei ole</option>\n  <option value=\"regex\">Regex</option>\n  <option value=\"!regex\">Ei regex</option>\n</select>";
    };

    StringFilter.prototype.createInput = function(id) {
      return this.setDebugAttr(Widget.text(id).attr("name", id));
    };

    StringFilter.prototype.createCase = function(id) {
      return [this.setDebugAttr(Widget.checkbox(id).attr("name", id)), Widget.label(id).text("Sama kirjainkoko")];
    };

    StringFilter.prototype.createUi = function() {
      var output;
      output = $("<span>");
      output.append(this.createMode(this.id("mode")));
      output.append(this.createInput(this.id()));
      return output.append(this.createCase(this.id("case")));
    };

    StringFilter.prototype.createFilter = function() {
      var flt, icase, mode, negate, value;
      mode = $("#" + this.id("mode")).val();
      value = $("#" + this.id()).val();
      if ((mode == null) || mode === "") {
        throw "Invalid select value for string mode.";
      }
      negate = false;
      if (mode[0] === "!") {
        mode = mode.substr(1);
        negate = true;
      }
      if (value == null) {
        value = "";
      }
      if (mode === "contains" && value === "") {
        return null;
      }
      icase = $("#" + this.id("case") + ":checked");
      if (icase.size() !== 1) {
        mode = "i" + mode;
      }
      flt = [mode, this.idName, value];
      return this.applyNOT(negate, flt);
    };

    return StringFilter;

  })(QueryFilter);

  QFilterManager.registerFilter("str", StringFilter);

  QFilterManager.registerFilter("text", StringFilter);

  EnumFilter = (function(_super) {
    __extends(EnumFilter, _super);

    function EnumFilter() {
      return EnumFilter.__super__.constructor.apply(this, arguments);
    }

    EnumFilter.prototype._createMode = function(id) {
      return "<select id=\"" + id + "\" " + (this.createDebugAttr()) + ">\n  <option value=\"in\" selected=\"selected\">On joukossa</option>\n  <option value=\"!in\">Ei ole joukossa</option>\n</select>";
    };

    EnumFilter.prototype._createOne = function(output, id, key, value_title) {
      var input, label;
      input = Widget.checkbox(id);
      input.data("key", key);
      this.setDebugAttr(input);
      label = Widget.label(id);
      label.text(value_title);
      output.append(input);
      return output.append(label);
    };

    EnumFilter.prototype._createValues = function(output) {
      var id, key, order, title, titles, _i, _len, _results;
      order = this.filterDef["order"];
      titles = this.filterDef["values"];
      this.valueIds = [];
      _results = [];
      for (_i = 0, _len = order.length; _i < _len; _i++) {
        key = order[_i];
        title = titles[key];
        id = this.id("v" + key);
        this._createOne(output, id, key, title);
        _results.push(this.valueIds.push(id));
      }
      return _results;
    };

    EnumFilter.prototype.createUi = function() {
      var group_id, mode_id, output;
      group_id = this.id("g");
      output = $("<span id=\"" + group_id + "\">");
      mode_id = this.id("m");
      output.html(this._createMode(mode_id));
      this._createValues(output);
      return output;
    };

    EnumFilter.prototype.createFilter = function() {
      var enumInput, group, keys, mode, negate, valueId, _i, _len, _ref;
      mode = $("#" + this.id("m")).val();
      negate = mode[0] === "!";
      group = $("#" + this.id("g"));
      keys = [];
      _ref = this.valueIds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        valueId = _ref[_i];
        enumInput = $("#" + valueId + ":checked", group);
        if (enumInput.length === 1) {
          keys.push(enumInput.data("key"));
        }
      }
      if (keys.length === 0) {
        return [];
      }
      if (keys.length === 1) {
        return this.applyNOT(negate, ["eq", this.idName, keys[0]]);
      }
      return this.applyNOT(negate, ["in", this.idName, keys]);
    };

    return EnumFilter;

  })(QueryFilter);

  QFilterManager.registerFilter("object_or", EnumFilter, function(filterDef) {
    return "multiple" in filterDef && filterDef.multiple === "or";
  });

  M2MFilter = (function(_super) {
    __extends(M2MFilter, _super);

    function M2MFilter() {
      return M2MFilter.__super__.constructor.apply(this, arguments);
    }

    M2MFilter.prototype._createMode = function(id) {
      return "<select id=\"" + id + "\" " + (this.createDebugAttr()) + ">\n  <option value=\"eq\" selected=\"selected\">On</option>\n  <option value=\"!eq\">Ei ole</option>\n</select>";
    };

    M2MFilter.prototype._createOne = function(key, title) {
      var one;
      one = $("<option>");
      if (key != null) {
        one.data("key", key);
        one.val(key);
      } else {
        one.attr("disabled", "disabled");
        one.attr("selected", "selected");
      }
      one.text(title);
      return one;
    };

    M2MFilter.prototype.createUi = function() {
      var key, one, order, output, sel, title, titles, _i, _len;
      output = $("<span>");
      output.append(this._createMode(this.id("m")));
      sel = $("<select id=\"" + (this.id("s")) + "\" " + (this.createDebugAttr()) + ">");
      sel.append(this._createOne(null, "---"));
      order = this.filterDef["order"];
      titles = this.filterDef["values"];
      for (_i = 0, _len = order.length; _i < _len; _i++) {
        key = order[_i];
        title = titles[key];
        one = this._createOne(key, title);
        sel.append(one);
      }
      output.append(sel);
      return output;
    };

    M2MFilter.prototype.createFilter = function() {
      var mode, negate, value_key;
      value_key = $("#" + this.id("s") + ">:selected");
      if (value_key.attr("disabled") != null) {
        return [];
      }
      value_key = value_key.data("key");
      mode = $("#" + this.id("m")).val();
      negate = mode[0] === "!";
      return this.applyNOT(negate, ["eq", this.idName, value_key]);
    };

    return M2MFilter;

  })(QueryFilter);

  QFilterManager.registerFilter("object_and", EnumFilter, function(filterDef) {
    return "multiple" in filterDef && filterDef.multiple === "and";
  });

  DateTimeFilter = (function(_super) {
    __extends(DateTimeFilter, _super);

    function DateTimeFilter() {
      return DateTimeFilter.__super__.constructor.apply(this, arguments);
    }

    DateTimeFilter.prototype._join = function(left, join, right, hasLeft, hasRight) {
      var ret;
      ret = "";
      if (hasLeft) {
        ret += left;
      }
      if (hasLeft && hasRight) {
        ret += join;
      }
      if (hasRight) {
        ret += right;
      }
      return ret;
    };

    DateTimeFilter.prototype._createFormat = function(filterDef) {
      var hasDate, hasTime, parse, placeholder, time, transport;
      hasTime = filterDef === "datetime" || filterDef === "time";
      hasDate = filterDef === "datetime" || filterDef === "date";
      placeholder = this._join("pp.kk.vvvv", " ", "hh:mm(:ss)", hasDate, hasTime);
      parse = this._join("D.M.YYYY", " ", "H:m", hasDate, hasTime);
      if (hasTime) {
        parse = [parse, this._join("D.M.YYYY", " ", "H:m:s", hasDate, hasTime)];
      }
      time = "HH:mm:ss";
      if (hasDate) {
        time += "ZZ";
      }
      transport = this._join("YYYY-MM-DD", "[T]", time, hasDate, hasTime);
      return {
        placeholder: placeholder,
        parse: parse,
        transport: transport
      };
    };

    DateTimeFilter.prototype._createMode = function(id) {
      var parts;
      if (this.filterDef !== "datetime") {
        parts = "<option value=\"eq\" selected=\"selected\">On</option>\n<option value=\"!eq\">Ei ole</option>\n<option value=\"lt\">Ennen</option>\n<option value=\"lte\">Ennen (tai tasan)</option>\n<option value=\"gt\">Jälkeen</option>\n<option value=\"gte\">Jälkeen (tai tasan)</option>";
      } else {
        parts = "<option value=\"lt\" selected=\"selected\">Ennen</option>\n<option value=\"gt\">Jälkeen</option>";
      }
      return "<select id=\"" + id + "\" " + (this.createDebugAttr()) + ">" + parts + "\n</select>";
    };

    DateTimeFilter.prototype.createUi = function(filterDef) {
      var format, match, output, value;
      if (filterDef == null) {
        filterDef = this.filterDef;
      }
      format = this._createFormat(filterDef);
      match = this._createMode(this.id("m"));
      value = this.setDebugAttr(Widget.text(this.id("v")));
      value.attr("placeholder", format.placeholder);
      output = $("<span>");
      output.append(match, value);
      return output;
    };

    DateTimeFilter.prototype.createFilter = function() {
      var flt, format, mode, negate, value, value_obj;
      format = this._createFormat(this.filterDef);
      mode = $("#" + this.id("m")).val();
      negate = false;
      if (mode[0] === "!") {
        mode = mode.substr(1);
        negate = true;
      }
      value = $("#" + this.id("v")).val();
      value_obj = moment(value, format.parse);
      if (!value_obj.isValid()) {
        return null;
      }
      if (this.filterDef === "datetime") {
        value_obj.utc();
      }
      flt = [mode, this.idName, value_obj.format(format.transport)];
      return this.applyNOT(negate, flt);
    };

    return DateTimeFilter;

  })(QueryFilter);

  QFilterManager.registerFilter("date", DateTimeFilter);

  QFilterManager.registerFilter("time", DateTimeFilter);

  QFilterManager.registerFilter("datetime", DateTimeFilter);

}).call(this);
