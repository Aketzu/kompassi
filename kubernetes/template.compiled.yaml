apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    stack: kompassi
    component: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    stack: kompassi
    component: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      stack: kompassi
      component: redis
  template:
    metadata:
      labels:
        stack: kompassi
        component: redis
    spec:
      enableServiceLinks: false
      containers:
      - name: master
        image: redis
        args:
        - redis-server
        - --appendonly
        - 'yes'
        ports:
        - containerPort: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    stack: kompassi
    component: redis
  name: redis-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    stack: kompassi
    component: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    stack: kompassi
    component: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      stack: kompassi
      component: postgres
  template:
    metadata:
      labels:
        stack: kompassi
        component: postgres
    spec:
      enableServiceLinks: false
      containers:
      - name: master
        image: postgres
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: kompassi
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        volumeMounts:
        - mountPath: /var/lib/postgresql
          name: postgres-data
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kompassi
          initialDelaySeconds: 15
          periodSeconds: 30
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kompassi
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    stack: kompassi
    component: postgres
  name: postgres-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  labels:
    stack: kompassi
    component: postgres
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: password
type: Opaque
data:
  username: a29tcGFzc2k=
  hostname: cG9zdGdyZXM=
  database: a29tcGFzc2k=
---
apiVersion: v1
kind: Service
metadata:
  name: kompassi
  labels:
    stack: kompassi
    component: kompassi
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    stack: kompassi
    component: kompassi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kompassi
spec:
  selector:
    matchLabels:
      stack: kompassi
      component: kompassi
  template:
    metadata:
      labels:
        stack: kompassi
        component: kompassi
    spec:
      enableServiceLinks: false
      securityContext:
        runAsUser: 998
        runAsGroup: 998
        fsGroup: 998
      initContainers:
      - name: setup
        image: kompassi
        args:
        - python
        - manage.py
        - setup
        env:
        - name: POSTGRES_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: hostname
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        - name: REDIS_HOSTNAME
          value: redis
        - name: REDIS_BROKER_DATABASE
          value: '1'
        - name: REDIS_CACHE_DATABASE
          value: '2'
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: kompassi
              key: secretKey
        - name: ALLOWED_HOSTS
          value: kompassi.127.0.0.1.xip.io
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
      containers:
      - name: master
        image: kompassi
        ports:
        - containerPort: 8000
        env:
        - name: POSTGRES_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: hostname
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        - name: REDIS_HOSTNAME
          value: redis
        - name: REDIS_BROKER_DATABASE
          value: '1'
        - name: REDIS_CACHE_DATABASE
          value: '2'
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: kompassi
              key: secretKey
        - name: ALLOWED_HOSTS
          value: kompassi.127.0.0.1.xip.io
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
        readinessProbe:
          httpGet:
            path: /api/v1/status
            port: 8000
            httpHeaders:
            - name: Host
              value: kompassi.127.0.0.1.xip.io
          initialDelaySeconds: 15
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /api/v1/status
            port: 8000
            httpHeaders:
            - name: Host
              value: kompassi.127.0.0.1.xip.io
          initialDelaySeconds: 30
          periodSeconds: 30
        volumeMounts:
        - mountPath: /usr/src/app/media
          name: kompassi-media
        - mountPath: /tmp
          name: kompassi-temp
      volumes:
      - name: kompassi-temp
        emptyDir: {}
      - name: kompassi-media
        persistentVolumeClaim:
          claimName: kompassi-media
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    stack: kompassi
    component: kompassi
  name: kompassi-media
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1000Mi
---
apiVersion: v1
kind: Secret
metadata:
  name: kompassi
  labels:
    stack: kompassi
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: secretKey
type: Opaque
data: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery
spec:
  selector:
    matchLabels:
      stack: kompassi
      component: celery
  template:
    metadata:
      labels:
        stack: kompassi
        component: celery
    spec:
      enableServiceLinks: false
      securityContext:
        runAsUser: 998
        runAsGroup: 998
        fsGroup: 998
      containers:
      - name: master
        image: kompassi
        args:
        - celery
        - -A
        - kompassi.celery_app:app
        - worker
        env:
        - name: POSTGRES_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: hostname
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        - name: REDIS_HOSTNAME
          value: redis
        - name: REDIS_BROKER_DATABASE
          value: '1'
        - name: REDIS_CACHE_DATABASE
          value: '2'
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: kompassi
              key: secretKey
        - name: ALLOWED_HOSTS
          value: kompassi.127.0.0.1.xip.io
        volumeMounts:
        - mountPath: /usr/src/app/media
          name: kompassi-media
        - mountPath: /tmp
          name: kompassi-temp
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
      volumes:
      - name: kompassi-temp
        emptyDir: {}
      - name: kompassi-media
        persistentVolumeClaim:
          claimName: kompassi-media
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    stack: kompassi
    component: nginx
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    stack: kompassi
    component: nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      stack: kompassi
      component: nginx
  template:
    metadata:
      labels:
        stack: kompassi
        component: nginx
    spec:
      enableServiceLinks: false
      containers:
      - name: master
        image: kompassi-static
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /usr/share/nginx/html/media
          name: kompassi-media
      volumes:
      - name: kompassi-temp
        emptyDir: {}
      - name: kompassi-media
        persistentVolumeClaim:
          claimName: kompassi-media
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kompassi
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.org/client-max-body-size: 100m
spec:
  rules:
  - host: kompassi.127.0.0.1.xip.io
    http:
      paths:
      - path: /static
        backend:
          serviceName: nginx
          servicePort: 80
      - path: /media
        backend:
          serviceName: nginx
          servicePort: 80
      - path: /
        backend:
          serviceName: kompassi
          servicePort: 8000
